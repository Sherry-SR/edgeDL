# use a fixed random seed to guarantee that when you run the code twice you will get the same outcome
manual_seed: null
# Network input sample dimension
dim: 3
# model configuration
model:
  # model class
  name: ResNet
  # number of input channels to the model
  in_channels: 1
  # number of output classes
  out_channels: 5
  # set layers
  layers: [3, 4, 6, 3]
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: False
# trainer configuration
trainer:
  # path to the checkpoint directory
  checkpoint_dir: /home/SENSETIME/shenrui/Dropbox/SenseTime/edgeDL/checkpoints/pelvis/casenet3d
  # path to latest checkpoint; if provided the training will be resumed from that checkpoint
  resume: null
  # how many iterations between validations
  validate_after_iters: 20
  # how many iterations between tensorboard logging
  log_after_iters: 3
  # how many iterations evaluated in validations
  validate_iters: null
  # how many iterations before start level set alignment
  align_start_iters: 20000
  # how many iterations between level set alignment
  align_after_iters: 10
  # max number of epochs
  epochs: 50
  # max number of iterations
  iters: null
  # model with lower eval score is considered better
  eval_score_higher_is_better: False
# optimizer configuration
optimizer:
  # initial learning rate
  learning_rate: 0.0001
  # weight decay
  weight_decay: 0.001
# loss function configuration
loss:
  # loss function to be used during training
  name: STEALEdgeLoss
  # A manual rescaling weight given to each class.
  loss_weight: null
  # a target value that is ignored and does not contribute to the input gradient
  ignore_index: null
# evaluation metric configuration
eval_metric:
  name: STEALEdgeLoss
  # a target label that is ignored during metric evaluation
  ignore_index: null
lr_scheduler:
  name: MultiStepLR
  milestones: [10, 30, 60]
  gamma: 0.2
# configuration for level set alignment
level_set:
  dim: 3
  lambda_: 0.1
  alpha: 1
  sigma: 1
  smoothing: 1
  render_radius: 1
  is_gt_semantic: True
  method: 'MLS'
  balloon: 0
  threshold: 0.95
  step_ckpts: 50
  dz: 16
  prefix: '/home/SENSETIME/shenrui/data/3D_pelvis_predict_BCE'
  n_workers: 0
# data loaders configuration
loaders:
  # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
  train_patch: [4, 350, 350]
  # train stride between patches
  train_stride: [2, 200, 200]
  # validation patch (can be bigger than train patch since there is no backprop)
  val_patch: [4, 350, 350]
  # validation stride (validation patches doesn't need to overlap)
  val_stride: [4, 350, 350]
  # clip value within the range
  clip_val: [-1000, 2000]
  # paths to the training datasets
  train_path:
    - '/home/SENSETIME/shenrui/data/pelvis_resampled/dataset_train_temp.txt'
  # paths to the validation datasets
  val_path:
    - '/home/SENSETIME/shenrui/data/pelvis_resampled/dataset_val_temp.txt'
  # how many subprocesses to use for data loading
  num_workers: 0
  # batch size in training process
  batch_size: 1
  # data transformations/augmentations
  transformer:
    train:
      raw:
        - name: ClipNormalize
        - name: RandomRotate
          axes: [[2, 1]]
          angle_spectrum: 30
          mode: reflect
        - name: ElasticDeformation
          spline_order: 3
        - name: ToTensor
          expand_dims: true
      label:
        - name: RandomRotate
          axes: [[2, 1]]
          angle_spectrum: 30
          mode: reflect
        - name: ElasticDeformation
          spline_order: 0
        - name: SegToEdge
          out_channels: 5
          radius: 1
        - name: ToTensor
          expand_dims: false
          dtype: 'long'
    test:
      raw:
        - name: ClipNormalize
        - name: ToTensor
          expand_dims: true
      label:
        - name: SegToEdge
          out_channels: 5
          radius: 1
        - name: ToTensor
          expand_dims: false
          dtype: 'long'